## Path:           SAP/Note/bobj - SAP BusinessObjects Business Intelligence platform settings
## Description:    Tune SAP BusinessObjects Business Intelligence platform
## ServiceRestart: sapconf
##
## This file includes parameters recommended by SAP
## https://uacp2.hana.ondemand.com/doc/46b1602a6e041014910aba7db0e91070/4.1.9/en-US/sbo41sp9_bip_inst_unix_en.pdf
## or https://websmp202.sap-ag.de/~sapidp/012002523100003123382016E/sbo42sp2_bip_inst_unix_en.pdf
## SAP BusinessObjects Business Intelligence platform
## Business Intelligence Platform
## Installation Guide for Unix
## section '4.1.3 Additional requirements for SUSE'
##
## Be in mind: If you edit or remove values from this file, sapconf will no
## long behave as designed to or monitor these removed parameters
##
## This file is sourced in the profile special script (lib/profile.sh)
## of sapconf.
#

# kernel.msgmni
# specifies the maximum number of message queue identifiers of the entire system
# the limit is IPCMNI (32k), so maximal possible value will be 32768
#
MSGMNI=1024

# kernel.shmmax
# This value can be set the run time limit on the maximum shared memory
# segment size that can be created.
# see https://www.kernel.org/doc/Documentation/sysctl/kernel.txt
#
# kernel.shmmax is set to the SHMMAX value from this file
#
# SHMMAX set to ULONG_MAX (18446744073709551615)
#
SHMMAX=18446744073709551615

# kernel.sem
# The next 4 values define the Semaphore limits
# kernel.sem = SEMMSL SEMMNS SEMOPM SEMMNI
#
# kernel.sem = 250 32000 32 1024
#

# The lower tuning limit of the maximum number of semaphores per semaphore set.
# Set to 250
#
SEMMSL=250

# The lower tuning limit of the maximum total number of semaphores.
# Set to 32000
#
SEMMNS=32000

# The lower tuning limit of the maximum number of semaphore operations that
# can be performed per "semop" system call.
# Set to 32
#
SEMOPM=32

# The lower tuning limit of maxium total number of semaphore sets.
# Set to 1024
#
SEMMNI=1024

# disk readahead
# queue/read_ahead_kb
# Defines the maximum number of kilobytes that the operating system may read
# ahead during a sequential read operation. As a result, the likely-needed
# information is already present within the kernel page cache for the next
# sequential read, which improves read I/O performance.
# Device mappers often benefit from a high read_ahead_kb value.
# Increasing the read_ahead_kb value might improve performance in environments
# where sequential reading of large files takes place. 
READAHEAD=4096
